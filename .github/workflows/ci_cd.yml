name: Run CI/CD

on:
  push:
    branches: 
      - main  # main„Éñ„É©„É≥„ÉÅ„Å∏„ÅÆÁõ¥Êé•push„Å´„Çà„Çã„Éà„É™„Ç¨„Éº
  pull_request:
    types: [opened, synchronize, reopened]  # PR‰ΩúÊàêÊôÇ„ÉªÊõ¥Êñ∞ÊôÇ„Å´„Éà„É™„Ç¨„Éº
    branches: ["**"]  # „Åô„Åπ„Å¶„ÅÆ„Éñ„É©„É≥„ÉÅ„Å∏„ÅÆPR„Çí„Éà„É™„Ç¨„Éº

# ÊòéÁ§∫ÁöÑ„Å™„Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥Ë®≠ÂÆö
permissions:
  contents: write # „É™„Éù„Ç∏„Éà„É™„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÊõ∏„ÅçËæº„ÅøÊ®©ÈôêÔºàËá™Âãï„Ç≥„Éü„ÉÉ„ÉàÁî®Ôºâ
  issues: write
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Â§âÊõ¥Â±•Ê≠¥„ÇíÂèñÂæó„Åô„Çã„Åü„ÇÅ„Å´ÂøÖË¶Å
          fetch-depth: 0
          # „ÉØ„Éº„ÇØ„Éï„É≠„Éº„Çí„Éà„É™„Ç¨„Éº„Åó„Åü„Éñ„É©„É≥„ÉÅ„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Ç¢„Ç¶„Éà
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Bun
        run: npm install -g bun

      # node_modules„Å®bun-cache„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É≥„Ç∞„ÇíÊâãÂãï„ÅßÂÆüË£Ö
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run formatter
        run: |
          set -e
          echo "Running formatter..."
          bun run check:write
        # „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÄÅ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅØÂÅúÊ≠¢„Åó„Åæ„Åô

      - name: Commit format changes if any
        run: |
          # Â§âÊõ¥„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç
          if [[ -n "$(git status --porcelain)" ]]; then
            git config --local user.name "github-actions[bot]"
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "style: apply automatic formatting"
            
            # „É™„É¢„Éº„Éà„ÅÆÂ§âÊõ¥„ÇíÂèñÂæó„Åó„Å¶„Åã„Çâ„Éó„ÉÉ„Ç∑„É•„ÇíË©¶„Åø„Çã
            git pull --rebase origin ${{ github.head_ref || github.ref_name }}
            git push
            echo "Changes committed and pushed"
          else
            echo "No changes to commit"
          fi

  test:
    runs-on: ubuntu-latest
    # lint„ÅÆÂæå„Å´ÂÆüË°å
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Bun
        run: npm install -g bun

      # node_modules„Å®bun-cache„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É≥„Ç∞„ÇíÊâãÂãï„ÅßÂÆüË£Ö
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun run test

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    # lint„ÅÆÂæå„Å´ÂÆüË°å„ÄÅtest„Å®‰∏¶ÂàóÂèØËÉΩ
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Bun
        run: npm install -g bun

      # node_modules„Å®bun-cache„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É≥„Ç∞„ÇíÊâãÂãï„ÅßÂÆüË£Ö
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      # Playwright„Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/playwright.config.ts') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps

      - name: Run E2E tests
        run: bun run test:e2e:ci
        env:
          CI: true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

#   # Deploy to Vercel Preview for non-main branches
#   deploy_preview:
#     name: Deploy to Vercel Preview
#     runs-on: ubuntu-latest
#     # lint„Å®test„Å®e2e-test„ÅåÊàêÂäü„Åó„ÅüÂæå„Å´ÂÆüË°å
#     needs: [test, e2e-test]
#     if: ${{ github.ref_name != 'main' && github.event_name == 'pull_request' }}
#     env:
#       VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
#       VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
#       VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v5
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
          
#       # Vercel CLI„ÅÆnpm„Ç≠„É£„ÉÉ„Ç∑„É•
#       - name: Cache npm dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-npm-
          
#       - name: Install Bun
#         run: npm install -g bun
        
#       - name: Install Vercel CLI
#         run: npm install --global vercel@latest
        
#       - name: Pull Vercel Environment
#         run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        
#       - name: Build project artifacts
#         run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        
#       - name: Deploy to Vercel Preview
#         id: deploy
#         run: |
#           # Deploy to Vercel and capture output
#           DEPLOY_OUTPUT=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
#           echo "$DEPLOY_OUTPUT"
#           # Extract the last preview URL from output
#           PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[^ ]*vercel.app' | tail -n1)
#           echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          
#       - name: Comment preview URL on PR
#         uses: actions/github-script@v7
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const prNumber = context.issue.number;
#             if (prNumber) {
#               // Post a comment with the preview URL
#               await github.rest.issues.createComment({
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 issue_number: prNumber,
#                 body: `üîî Preview Deployment: ${{ steps.deploy.outputs.preview_url }}`
#               });
#             }

#   # Deploy to Vercel Production for main branch
#   deploy_production:
#     name: Deploy to Vercel Production
#     runs-on: ubuntu-latest
#     # lint„Å®test„Å®e2e-test„ÅåÊàêÂäü„Åó„ÅüÂæå„Å´ÂÆüË°å
#     needs: [test, e2e-test]
#     if: ${{ github.ref_name == 'main' }}
#     env:
#       VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
#       VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
#       VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v5
        
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
          
#       # Vercel CLI„ÅÆnpm„Ç≠„É£„ÉÉ„Ç∑„É•
#       - name: Cache npm dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-npm-
          
#       - name: Install Bun
#         run: npm install -g bun
        
#       - name: Install Vercel CLI
#         run: npm install --global vercel@latest
        
#       - name: Pull Vercel Environment
#         run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
#       - name: Build project artifacts
#         run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
#       - name: Deploy to Vercel Production
#         run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
